openapi: '3.0.3'
info:
  version: 1.0.0
  title: Object Store Database Endpoints
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: christophhagelkruys@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: http://192.168.144.3:8080
    description: Local server

paths:
  '/types':
    get:
      summary: Get all types
      operationId: getTypes
      responses:
        '200':
          $ref: '#/components/responses/TypesResponse'
        '401':
          description: Unauthorized
        '500':
          description: InternalServerError
    post:
      summary: Create Type
      operationId: createType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Type'
      responses:
        '200':
          $ref: '#/components/responses/TypeResponse'
        '401':
          description: Unauthorized
        '500':
          description: InternalServerError

  '/types/{id}':
    get:
      summary: Get Type by id
      operationId: getTypeById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/TypeResponse'
        '401':
          description: Unauthorized
        '404':
          description: Type Not Found
        '500':
          description: InternalServerError
    put:
      summary: Update type
      operationId: updateType
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateType'
      responses:
        '200':
          $ref: '#/components/responses/TypeResponse'
        '401':
          description: Unauthorized
        '404':
          description: Type Not Found
        '500':
          description: InternalServerError
    delete:
      summary: Delete type by Id
      operationId: deleteType
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted
        '401':
          description: Unauthorized
        '404':
          description: Type Not Found
        '500':
          description: InternalServerError
  '/operations':
    post:
      summary: Do Operations in order revert on one failing
      operationId: doOperations
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OperationDefinition'
      responses:
        '200':
          description: Successfully finished
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: InternalServerError
components:
  schemas:
    Type:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        additionalProperties:
          type: boolean
        backendKeyDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/BasicBackendDefinition'
    BackendKeyType:
      type: string
      enum:
        - primaryKey
        - double
        - string
        - boolean
        - long
        - integer
        - timestamp
        - date
        - array
        - object
        - oneToOne
        - oneToMany
    BasicBackendDefinition:
      type: object
      required:
        - type
      properties:
        key:
          type: string
        isNullAble:
          type: boolean
        type:
          $ref: '#/components/schemas/BackendKeyType'
        isUnique:
          type: boolean
          default: false
      discriminator:
        propertyName: type
        mapping:
          primaryKey: '#/components/schemas/PrimitiveDefinition'
          double: '#/components/schemas/PrimitiveDefinition'
          string: '#/components/schemas/PrimitiveDefinition'
          boolean: '#/components/schemas/PrimitiveDefinition'
          long: '#/components/schemas/PrimitiveDefinition'
          integer: '#/components/schemas/PrimitiveDefinition'
          timestamp: '#/components/schemas/PrimitiveDefinition'
          date: '#/components/schemas/PrimitiveDefinition'
          array: '#/components/schemas/ArrayDefinition'
          object: '#/components/schemas/ObjectDefinition'
          oneToOne: '#/components/schemas/RelationDefinition'
          oneToMany: '#/components/schemas/RelationDefinition'

    PrimitiveDefinition:
      allOf:
        - $ref: "#/components/schemas/BasicBackendDefinition"
    ArrayDefinition:
      allOf:
        - $ref: "#/components/schemas/BasicBackendDefinition"
        - type: object
          properties:
            primitiveArrayType:
              $ref: '#/components/schemas/BackendKeyType'
            properties:
              type: array
              items:
                $ref: '#/components/schemas/BasicBackendDefinition'
            additionalProperties:
              type: boolean
            additionalItems:
              type: boolean
    ObjectDefinition:
      allOf:
        - $ref: "#/components/schemas/BasicBackendDefinition"
        - type: object
          properties:
            properties:
              type: array
              items:
                $ref: '#/components/schemas/BasicBackendDefinition'
            additionalProperties:
              type: boolean
    RelationDefinition:
      allOf:
        - $ref: "#/components/schemas/BasicBackendDefinition"
        - type: object
          properties:
            referencedTypeId:
              type: string
            referenceKey:
              type: string
    Object:
      type: object
      additionalProperties: true
    OperationDefinition:
      type: object
      required:
        - operationType
      properties:
        operationType:
          type: string
          enum:
            - create
            - update
            - delete
        typeReferenceId:
          type: string
      discriminator:
        propertyName: operationType
        mapping:
          create: '#/components/schemas/CreateUpdateOperationDefinition'
          update: '#/components/schemas/CreateUpdateOperationDefinition'
          delete: '#/components/schemas/DeleteOperationDefinition'
    CreateUpdateOperationDefinition:
      allOf:
        - $ref: "#/components/schemas/OperationDefinition"
        - type: object
          properties:
            object:
              $ref: '#/components/schemas/Object'
    DeleteOperationDefinition:
      allOf:
        - $ref: "#/components/schemas/OperationDefinition"
        - type: object
          properties:
            objectId:
              type: string
    UpdateType:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Type'
        objects:
          type: array
          items:
            $ref: '#/components/schemas/Object'
  responses:
    TypesResponse:
      description: An array of types
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Type'
    TypeResponse:
      description: Requested Type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Type'

externalDocs:
  description: Find out more about Swagger
  url: 'https://swagger.io'
